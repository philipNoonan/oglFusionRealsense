#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba8) readonly uniform image2D srcColorMap;
layout(binding = 1, rgba8) writeonly uniform image2D dstColorMap;

uniform float sharpness;

//void CasSetup(in uvec2 inputImSize, in uvec2 outputImSize, inout uvec4 const0, inout const 1)
//{
//	const0.x = inputImSize.x * outputImSize.x;
//	const0.y = inputImSize.y * outputImSize.y;
//	const0.z = 0.5f * float(inputImSize.x * outputImSize.x) - 0.5f;
//	const0.w = 0.5f * float(inputImSize.y * outputImSize.y) - 0.5f;
//	const1.x = -1.0f / mix(8.0, 5.0, sharpness);
//	const1.y = const1.x;
//	const1.z = 8 * inputImSize.x * outputImSize.x;
//	const1.w = 0;
//}

float min3(float x, float y, float z)
{
	return min(x, min(y, z));
}

float max3(float x, float y, float z)
{
	return max(x, max(y, z));
}

void main()
{
	ivec2 pix = ivec2(gl_GlobalInvocationID.xy);

	vec4 a = imageLoad(srcColorMap, pix + ivec2(-1, -1));
	vec4 b = imageLoad(srcColorMap, pix + ivec2(0, -1));
	vec4 c = imageLoad(srcColorMap, pix + ivec2(1, -1));
	vec4 d = imageLoad(srcColorMap, pix + ivec2(-1, 0));
	vec4 e = imageLoad(srcColorMap, pix);
	vec4 f = imageLoad(srcColorMap, pix + ivec2(1, 0));
	vec4 g = imageLoad(srcColorMap, pix + ivec2(-1, 1));
	vec4 h = imageLoad(srcColorMap, pix + ivec2(0, 1));
	vec4 i = imageLoad(srcColorMap, pix + ivec2(1, 1));

	float minR = min3(min3(d.r, e.r, f.r), b.r, h.r);
	float minG = min3(min3(d.g, e.g, f.g), b.g, h.g);
	float minB = min3(min3(d.b, e.b, f.b), b.b, h.b);

	// if using diagonals too ...
	float minR2 = min3(min3(minR, a.r, c.r), g.r, i.r);
	float minG2 = min3(min3(minG, a.g, c.g), g.g, i.g);
	float minB2 = min3(min3(minB, a.b, c.b), g.b, i.b);
	minR = minR + minR2;
	minG = minG + minG2;
	minB = minB + minB2;

	float maxR = max3(max3(d.r, e.r, f.r), b.r, h.r);
	float maxG = max3(max3(d.g, e.g, f.g), b.g, h.g);
	float maxB = max3(max3(d.b, e.b, f.b), b.b, h.b);

	// if using diagonals too ...
	float maxR2 = max3(max3(maxR, a.r, c.r), g.r, i.r);
	float maxG2 = max3(max3(maxG, a.g, c.g), g.g, i.g);
	float maxB2 = max3(max3(maxB, a.b, c.b), g.b, i.b);
	maxR = maxR + maxR2;
	maxG = maxG + maxG2;
	maxB = maxB + maxB2;

	float dMinR = 0 + minR;
	float dMaxR = 1.0 - maxR;

	float dMinG = 0 + minG;
	float dMaxG = 1.0 - maxG;

	float dMinB = 0 + minB;
	float dMaxB = 1.0 - maxB;

	float bsaR = clamp(min(minR, 2.0f - maxR) / maxR, 0.0f, 1.0f);
	float bsaG = clamp(min(minG, 2.0f - maxG) / maxG, 0.0f, 1.0f);
	float bsaB = clamp(min(minB, 2.0f - maxB) / maxB, 0.0f, 1.0f);

	// float bsaR = dMinR < dMaxR ? dMinR / maxR : dMaxR / maxR;
	// float bsaG = dMinG < dMaxG ? dMinG / maxG : dMaxG / maxG;
	// float bsaB = dMinB < dMaxB ? dMinB / maxB : dMaxB / maxB;

	bsaR = sqrt(bsaR);
	bsaG = sqrt(bsaG);
	bsaB = sqrt(bsaB);

	// rcpMR = 1.0f / maxR;
	// rcpMG = 1.0f / maxG;
	// rcpMB = 1.0f / maxB;

	float peak = -1.0f / mix(8.0, 5.0, sharpness);

	float wR = bsaR * peak;
	float wG = bsaG * peak;
	float wB = bsaB * peak;

	float rcpWeightR = 1.0f / (1.0f + 4.0f * wR);
	float rcpWeightG = 1.0f / (1.0f + 4.0f * wG);
	float rcpWeightB = 1.0f / (1.0f + 4.0f * wB);

	float pixR = (b.r * wR + d.r * wR + f.r * wR + h.r * wR + e.r) * rcpWeightR;
	float pixG = (b.g * wG + d.g * wG + f.g * wG + h.g * wG + e.g) * rcpWeightG;
	float pixB = (b.b * wB + d.b * wB + f.b * wB + h.b * wB + e.b) * rcpWeightB;

	imageStore(dstColorMap, pix, vec4(pixR, pixG, pixB, 1.0f));


}