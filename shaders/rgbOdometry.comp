#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba8) uniform image2D lastColorMap;
layout(binding = 1, rgba8) uniform image2D nextColorMap;

layout(binding = 2, rg32f) uniform image2D gradientMap;

layout(binding = 3, rg16ui) uniform uimage2D mappingC2DMap;
layout(binding = 4, rg16ui) uniform uimage2D mappingD2CMap;

layout(binding = 5, r32f) uniform image2D lastDepthMap;
layout(binding = 6, r32f) uniform image2D nextDepthMap;

layout(binding = 7, rgba32f) uniform image2D outputTestImage;




uniform float minScale;
uniform float maxDepthDelta;
uniform vec3 kt;
uniform mat3 krkinv;
uniform int level;

struct DataTerm
{
	ivec2 zero;
    ivec2 one;
    float diff;
    bool valid;
};

layout(std430, binding = 0) buffer corresData
{
    DataTerm corresImg[];
};

float luminance(vec3 rgb)
{
    return (0.299f * float(rgb.x) + 0.587f * float(rgb.y) + 0.114f * float(rgb.z));
}

void computeDerivatives()
{

}

void computeResiduals()
{
	
	ivec2 nextColorLoc = ivec2(gl_GlobalInvocationID.xy);
	ivec2 imSize = ivec2(imageSize(lastDepthMap).xy);
	
	DataTerm corres;

	ivec2 value = ivec2(0,0);

	corres.zero = ivec2(0.0f);
	corres.one = ivec2(0.0f);
	corres.diff = 0.0f;
	corres.valid = false;


	if (nextColorLoc.x >= 0 && nextColorLoc.y >= 0 && nextColorLoc.x < imSize.x && nextColorLoc.y < imSize.y)
	{
		bool valid = true;

		for (int u = nextColorLoc.x - 2; u < nextColorLoc.x + 2; u++)
		{
			for (int v = nextColorLoc.y - 2; v < nextColorLoc.y + 2; v++)
			{
				valid = valid && (luminance(imageLoad(nextColorMap, ivec2(u,v)).xyz) > 0);
			}
		}

		//imageStore(outputTestImage, ivec2(nextColorLoc), vec4(0.3,0.6,0.9,1.0)); 

		if (valid)
		{
			// if there is a gradient, then we can look at detecting motion from it, so the gradient should be over a threshold
			vec2 gradXY = imageLoad(gradientMap, nextColorLoc).xy;

			float mTwo = (gradXY.x * gradXY.x) + (gradXY.y * gradXY.y);
	
			if (mTwo >= minScale)
			{


				uvec2 depthLoc = uvec2(imageLoad(mappingC2DMap, nextColorLoc << level).xy >> level); // since we are using the full reso mappingMap we need to make the coords work

				ivec2 nextDepthLoc = ivec2(int(depthLoc.x), int(depthLoc.y));

				float d1 = imageLoad(nextDepthMap, nextDepthLoc).x;
				
				//if (depthLoc.x < 1000)
				//{
				//	imageStore(outputTestImage, nextColorLoc, vec4(depthLoc, 0, 1)); 
				//}

				

				// if the pixels with good gradient actually have valid depth associated with them, is this an issue with pixels on depth boundaries that are noisy?
				if (!isnan(d1) || d1 != 0)
				{
					float transformed_d1 = float(d1 * (krkinv[0].z * float(nextDepthLoc.x) + krkinv[1].z * float(nextDepthLoc.y) + krkinv[2].z) + kt.z);
					ivec2 lastDepthLoc;
					lastDepthLoc.x = int(((d1 * (krkinv[0].x * float(nextDepthLoc.x) + krkinv[1].x * float(nextDepthLoc.y) + krkinv[2].x) + kt.x) / transformed_d1) + 0.5f); // do i want to round to nearest even?
					lastDepthLoc.y = int(((d1 * (krkinv[0].y * float(nextDepthLoc.x) + krkinv[1].y * float(nextDepthLoc.y) + krkinv[2].y) + kt.y) / transformed_d1) + 0.5f);
			
					//imageStore(outputTestImage, nextColorLoc, vec4(lastDepthLoc, 0, 1)); 

					if (lastDepthLoc.x >= 0 && lastDepthLoc.y >= 0 && lastDepthLoc.x < imSize.x && lastDepthLoc.y < imSize.y)
					{
						float d0 = float(imageLoad(lastDepthMap, lastDepthLoc).x);

						if (d0 != 0)
						{
							uvec2 lastColorLoc = uvec2(imageLoad(mappingD2CMap, lastDepthLoc << level).xy >> level);

							//imageStore(outputTestImage, nextColorLoc, vec4(1,0, 0, 1)); 

							float lastColor = luminance(imageLoad(lastColorMap, ivec2(lastColorLoc)).xyz);

							//imageStore(outputTestImage, ivec2(depthLoc), vec4(lastColorLoc.x, nextColorLoc.x, lastColorLoc.y, nextColorLoc.y)); 


							if (d0 > 0 && abs(transformed_d1 - d0) <= maxDepthDelta && lastColor != 0)
							{

								//imageStore(outputTestImage, ivec2(nextColorLoc), vec4(luminance(imageLoad(nextColorMap, ivec2(nextColorLoc.x, nextColorLoc.y)).xyz) - lastColor, 0, 0, 1)); 

								corres.zero.x = int(lastColorLoc.x);
								corres.zero.y = int(lastColorLoc.y);
								corres.one.x = nextColorLoc.x;
								corres.one.y = nextColorLoc.y;
								corres.diff = luminance(imageLoad(nextColorMap, ivec2(nextColorLoc.x, nextColorLoc.y)).xyz) - lastColor;
								corres.valid = true;
								value.x = 1;
								value.y = int(corres.diff * corres.diff);
							}
						}
						
				
				
					}
			
				}





			}
	
		}

	}

	

	corresImg[nextColorLoc.y * imSize.x + nextColorLoc.x] = corres;

}



void main()
{
	computeResiduals();
}