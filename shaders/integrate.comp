#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rg16f) uniform image3D volumeData;

layout (binding = 1, rgba32f) readonly uniform image2D currVertexMap;
layout (binding = 2, rgba8) readonly uniform image2D currTrackMap;

uniform int integrateFlag;
uniform int resetFlag;

uniform mat4 invT;
uniform mat4 K;

uniform int p2p;
uniform int p2v;

uniform float volDim; // length in meters FLOAT!!!!
uniform float volSize; // voxel grid size
uniform float maxWeight;


vec3 projectPointImage(vec3 p, float fx, float fy, float cx, float cy)
{
    return vec3(((fx * p.x) / p.z) + cx,
                ((fy * p.y) / p.z) + cy,
                p.z);
}

vec3 getVolumePosition(uvec3 p)
{
    return vec3((p.x + 0.5f) * volDim / volSize, (p.y + 0.5f) * volDim / volSize, (p.z + 0.5f) * volDim / volSize);
}

vec4 getSDF(uvec3 pos)
{
    return imageLoad(volumeData, ivec3(pos));
}

bool inFrustrum(in vec4 pClip)
{
    return abs(pClip.x) < pClip.w &&
           abs(pClip.y) < pClip.w; 
}

void integrateExperimental()
{
	int numberOfCameras = 1;

    ivec2 depthSize = ivec2(imageSize(currVertexMap).xy);
    uvec3 pix = gl_GlobalInvocationID.xyz;

    float diff[4]; // max number of cameras on one system

    vec4 track[4];
    int bestTrack;

    for (pix.z = 0; pix.z < volSize; pix.z++)
    {
        for (int cameraDevice = 0; cameraDevice < numberOfCameras; cameraDevice++)
        {
            // get world position of centre of voxel 
            vec3 worldPos = vec3(invT * vec4(getVolumePosition(pix), 1.0f)).xyz;

			vec3 pixel = projectPointImage(worldPos, K[0][0], K[1][1], K[2][0], K[2][1]);


			ivec2 px = ivec2(pixel.x + 0.5f, pixel.y + 0.5f); // for rounding

			//imageStore(volumeData, ivec3(pix), vec4(dMin, dMax, 0, 0));


            // if we dont check if we hit the image here and just assume that if pixel is out of bounds the resultant texture read will be zero
            if (px.x < 0 || px.x > depthSize.x - 1 || px.y < 0 || px.y > depthSize.y - 1)
            {
                diff[cameraDevice] = -10000.0f;
                continue;
            }

			track[cameraDevice] = imageLoad(currTrackMap, px);

			vec4 depthPoint = imageLoad(currVertexMap, px);



            if (depthPoint.z <= 0.0f)
            {
                diff[cameraDevice] = -10000.0f;
                continue;
            }

            // if we get here, then the voxel is seen by this cameraDevice
            // determin best cameraDevice
            vec3 shiftVec = worldPos - depthPoint.xyz;
            float tdiff = length(shiftVec);
            diff[cameraDevice] = shiftVec.z < 0.0 ? tdiff : -tdiff;

			//

        }


        float finalDiff = 10000.0f;
        float validCameras = 0;
        for (int cameraDevice = 0; cameraDevice < numberOfCameras; cameraDevice++)
        {
            if (diff[cameraDevice] != 10000.0f)
            {
                if (abs(diff[cameraDevice]) < abs(finalDiff))
                {
                    bestTrack = cameraDevice;
                    finalDiff = diff[cameraDevice];
                }
            }
        }

		//imageStore(volumeData, ivec3(pix), vec4(finalDiff, 0, 0, 1));

        float ctfo = 0.1f;
        if (track[bestTrack] == vec4(0.5f, 0.5f, 0.5f, 1.0 ))
        {
            ctfo = 0.1f;
        }
        else if (track[bestTrack] == vec4(1.0f, 1.0f, 0.0f, 1.0))
        {
            ctfo = 0.001f;
        }
        else if (track[bestTrack] == vec4(1.0f, 0.0f, 0.0f, 1.0))
        {
            ctfo = 0.001f;
        }

		float dMin = -volDim / 20.0f;
		float dMax = volDim / 10.0f;

        // if diff within TSDF range, write to volume
        if (finalDiff < dMax && finalDiff > dMin)
        {

            vec4 data = getSDF(pix);
            float weightedDistance = 0.0f;
            if (p2p == 1)
            {
                weightedDistance = (data.y * data.x + finalDiff) / (data.y + 1);
            }
            else if (p2v == 1)
            {
                weightedDistance = (data.y * data.x + ctfo * finalDiff) / (data.y + ctfo);
            }

            if (weightedDistance < dMax)
            {
                data.x = clamp(weightedDistance, dMin, dMax);
                //data.x = diff;
                data.y = min(data.y + 1, (maxWeight));
            }
            else
            {
                data.x = 0;
                data.y = 0;
            }
            imageStore(volumeData, ivec3(pix), data);
        }
        else
        {
            //pix.z += 50; // need to be clever here, but this could work nicely woudl like to jump to just before the 
            //imageStore(volumeData, ivec3(pix), vec4(0.0f));
        }

		
    }

}

void fuse(in vec4 previousTSDF, in vec4 currentTSDF, out vec4 outputTSDF)
{
    if (abs(previousTSDF.z) == 0.0f || abs(currentTSDF.x) < abs(previousTSDF.z))
    {
        outputTSDF = vec4(previousTSDF.x, previousTSDF.y, currentTSDF.x, currentTSDF.y);
    }
    else
    {
        outputTSDF = previousTSDF;
    }
}

void resetVolume()
{
    uvec2 pix = gl_GlobalInvocationID.xy;

	//uvec3 volumeSize = imageSize(volumeData);

    if (pix.x < volSize && pix.y < volSize)
    {
        for (int zDep = 0; zDep < volSize; zDep++)
        {
            imageStore(volumeData, ivec3(pix.x, pix.y, zDep), vec4(0));
        }
    }
}

void main()
{
	if (integrateFlag == 1)
	{
	    integrateExperimental();
	}
	else if (resetFlag == 1)
	{
		resetVolume();
	}
}

